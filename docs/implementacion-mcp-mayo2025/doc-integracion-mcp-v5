# Documentación de Integración MCP v5

## Resumen

Este documento describe la integración de servidores MCP (Model Context Protocol) en el proyecto asistentes-ia-v02, creando una nueva versión (MCP v5) que conecta el bot con servidores MCP externos listos para usar.

## Servidores MCP integrados

| Servidor MCP | URL | Herramientas | Alojamiento |
|--------------|-----|--------------|-------------|
| **Zapier MCP** | `https://zapier.com/mcp` | +7000 apps (Drive, Gmail, Slack, Notion…) | Nube (zapier.com/mcp) |
| **Activepieces MCP** | `https://cloud.activepieces.com/mcp` | ≈280 integraciones (Gmail, Calendar, Slack…) | Nube |
| **Brave Search MCP** | `https://search.bravesoftware.com/mcp` | Búsqueda web (requiere API key) | Nube |
| **Web‑Search MCP** | `https://web-search.mcpservers.org/mcp` | Búsqueda Google (sin API key) | Nube |

## Variables de entorno requeridas

Para el correcto funcionamiento de la integración, se deben configurar las siguientes variables de entorno en el servicio de preview deploy (Vercel):

```
OPENAI_API_KEY=sk-...
GITHUB_TOKEN=github_pat_...
MCP_ZAPIER_URL=https://zapier.com/mcp
MCP_ACTIVEPIECES_URL=https://cloud.activepieces.com/mcp
MCP_BRAVE_SEARCH_URL=https://search.bravesoftware.com/mcp
MCP_WEB_SEARCH_URL=https://web-search.mcpservers.org/mcp
```

> **Importante**: Nunca incluir valores reales de tokens o claves API en el código. Siempre usar variables de entorno.

## Implementación

### 1. Interfaz de usuario

Se ha añadido una nueva tarjeta "MCP v5" en la página de asistentes con:
- Icono de martillo con indicador numérico de herramientas disponibles
- Descripción detallada de las capacidades
- Enlace al chat especializado

### 2. Integración con OpenAI Agents

La integración utiliza el nuevo SDK de OpenAI para Agents, que simplifica la conexión con servidores MCP:

```javascript
import { Agent, MCPServerSse } from 'openai/agents';

const agent = new Agent({
  model: "gpt-4o-mini",
  mcp_servers: [
    new MCPServerSse(process.env.MCP_ZAPIER_URL),
    new MCPServerSse(process.env.MCP_ACTIVEPIECES_URL),
    new MCPServerSse(process.env.MCP_BRAVE_SEARCH_URL),
    new MCPServerSse(process.env.MCP_WEB_SEARCH_URL)
  ]
});

// Listar herramientas disponibles
const tools = await agent.listTools();
```

### 3. Visualización de herramientas disponibles

Se ha implementado un contador visual que muestra el número de herramientas disponibles:
- En la tarjeta de selección de asistente (página principal)
- En la cabecera del chat MCP v5

## Resultados de pruebas

### Prueba 1: Búsqueda web
- **Prompt**: "¿Qué hay de nuevo en IA 2025?"
- **Resultado**: El asistente utilizó correctamente la herramienta de búsqueda web para obtener información actualizada sobre avances en IA en 2025.
- **Herramienta utilizada**: Brave Search MCP

### Prueba 2: Gmail
- **Prompt**: "¿Cuáles son mis correos recientes?"
- **Resultado**: El asistente simuló el acceso a Gmail y devolvió información sobre correos recientes.
- **Herramienta utilizada**: Simulación de Zapier MCP (Gmail)

### Prueba 3: Calendar
- **Prompt**: "¿Qué eventos tengo en mi calendario para los próximos días?"
- **Resultado**: El asistente simuló la consulta al calendario y devolvió información sobre eventos próximos simulados.
- **Herramienta utilizada**: Simulación de Calendar MCP

## Consideraciones técnicas

1. **Carga dinámica de herramientas**: El sistema carga dinámicamente las herramientas disponibles al iniciar el chat.
2. **Manejo de errores**: Se implementó manejo de errores para casos donde los servidores MCP no estén disponibles.
3. **Compatibilidad con versiones anteriores**: La nueva implementación no afecta las versiones anteriores de MCP (v3 y v4).
4. **Seguridad**: Todas las claves API y tokens se manejan exclusivamente a través de variables de entorno.
5. **Detección de bucles**: Se ha implementado un sistema para detectar y romper bucles infinitos cuando el asistente intenta usar repetidamente la misma herramienta con los mismos argumentos.
6. **Simulación de herramientas**: Se han implementado simulaciones realistas para herramientas como Gmail, Calendar y Drive cuando no hay acceso a los servicios reales.
7. **Detección de intenciones**: El sistema puede detectar la intención del usuario y redirigir a la herramienta apropiada, incluso si el asistente inicialmente intenta usar una herramienta incorrecta.

## Próximos pasos

1. **Autenticación OAuth**: Implementar un flujo de autenticación OAuth para conectar con servicios reales (Gmail, Drive, Calendar)
2. **Almacenamiento seguro de tokens**: Crear un sistema para almacenar de forma segura los tokens de acceso a servicios externos
3. **Interfaz de consentimiento**: Desarrollar una interfaz que permita al usuario gestionar los permisos de acceso a sus servicios
4. **Integración con APIs reales**: Reemplazar las simulaciones por llamadas reales a las APIs correspondientes
5. **Sistema de caché**: Implementar un sistema de caché para las definiciones de herramientas MCP
6. **Más servidores MCP**: Añadir más servidores MCP especializados
7. **Mejorar UI**: Mejorar la interfaz para mostrar qué herramientas están disponibles

## Requisitos para despliegue en Vercel

1. **Variables de entorno**: Asegurarse de configurar todas las variables de entorno requeridas en la configuración del proyecto en Vercel:
   - `OPENAI_API_KEY`
   - `MCP_ZAPIER_URL`
   - `MCP_ACTIVEPIECES_URL`
   - `MCP_BRAVE_SEARCH_URL`
   - `MCP_WEB_SEARCH_URL`

2. **Timeouts**: Configurar los timeouts en Vercel para permitir llamadas de larga duración (al menos 60 segundos) ya que las llamadas a los servidores MCP pueden tardar más de lo habitual.

3. **Servidor Edge**: Para mejor rendimiento, considerar usar Vercel Edge Functions para las llamadas a la API de OpenAI y servidores MCP.

4. **Memoria y CPU**: Asegurarse de que la instancia tenga suficiente memoria y CPU para manejar múltiples llamadas simultáneas a herramientas.

5. **CORS**: Configurar correctamente las políticas CORS si se van a hacer llamadas desde dominios externos.

## Conclusión

La integración de servidores MCP externos en el proyecto asistentes-ia-v02 amplía significativamente las capacidades del asistente, permitiéndole acceder a miles de herramientas y servicios externos. La fase actual incluye simulaciones realistas de servicios como Gmail, Calendar y Drive, con mecanismos para prevenir bucles y errores. 

La próxima fase implementará OAuth para conectar con servicios reales, ofreciendo una experiencia completa y personalizada. La arquitectura modular facilita la adición de nuevos servidores MCP en el futuro.
